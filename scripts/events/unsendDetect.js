//====================================//
//  Author: Samit (GoatBot v2)
//  Feature: Detect & resend unsent messages
//====================================//

const fs = require("fs");
const path = require("path");
const axios = require("axios"); // GoatBot v2 рждрзЗ axios ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржерж╛ржХрзЗ

module.exports.config = {
  name: "unsendDetect",
  eventType: ["message", "message_unsend"],
  version: "2.0.0",
  author: "Samit (GoatBot)",
  role: 0,
  description: "Detects deleted/unsent messages and re-sends them",
  category: "event"
};

const messageCache = new Map();

// тЬЕ Step 1: ржпржЦржи ржХрзЗржЙ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рзЯ тЖТ cache ржП рж╕ржВрж░ржХрзНрж╖ржг
module.exports.onEvent = async function ({ api, event, usersData }) {
  // ржорзЗрж╕рзЗржЬ рж╕рзЗржн ржХрж░рж╛
  if (event.type === "message") {
    if (!event.messageID) return;
    messageCache.set(event.messageID, {
      body: event.body || "",
      attachments: event.attachments || [],
      senderID: event.senderID
    });
    // cache ржмрзЗрж╢рж┐ ржмрзЬ рж╣рж▓рзЗ ржХрзНрж▓рж┐ржи ржХрж░рзЛ
    if (messageCache.size > 300) messageCache.clear();
  }

  // тЬЕ Step 2: ржпржЦржи ржХрзЗржЙ ржЖржирж╕рзЗржирзНржб ржХрж░рзЗ
  if (event.logMessageType === "message_unsend") {
    const data = messageCache.get(event.messageID);
    if (!data) return;

    const sender = await usersData.getName(data.senderID).catch(() => data.senderID);
    let msg = `ЁЯЪл ${sender} just unsent a message!`;

    // ржЯрзЗржХрзНрж╕ржЯ ржерж╛ржХрж▓рзЗ
    if (data.body) msg += `\nЁЯТм Message: ${data.body}`;

    // ржпржжрж┐ ржорж┐ржбрж┐рзЯрж╛ ржерж╛ржХрзЗ (ржЫржмрж┐, ржнрж┐ржбрж┐ржУ, ржЕржбрж┐ржУ ржЗрждрзНржпрж╛ржжрж┐)
    if (data.attachments.length > 0) {
      const files = [];

      for (const att of data.attachments) {
        try {
          const ext =
            att.type === "photo"
              ? ".jpg"
              : att.type === "video"
              ? ".mp4"
              : att.type === "audio"
              ? ".mp3"
              : att.type === "animated_image"
              ? ".gif"
              : ".bin";
          const filePath = path.join(__dirname, `temp_${Date.now()}${ext}`);

          // axios ржжрж┐рзЯрзЗ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб
          const res = await axios.get(att.url, { responseType: "arraybuffer" });
          fs.writeFileSync(filePath, Buffer.from(res.data));
          files.push(fs.createReadStream(filePath));
        } catch (err) {
          console.log("тЪая╕П Failed to download attachment:", err.message);
        }
      }

      // ржорж┐ржбрж┐рзЯрж╛ + ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ
      api.sendMessage({ body: msg, attachment: files }, event.threadID, () => {
        // ржЯрзЗржорзНржк ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ
        for (const file of files) {
          try {
            fs.unlinkSync(file.path);
          } catch {}
        }
      });
    } else {
      // рж╢рзБржзрзБ ржЯрзЗржХрзНрж╕ржЯ рж╣рж▓рзЗ
      api.sendMessage(msg, event.threadID);
    }

    messageCache.delete(event.messageID);
  }
};
